(window.webpackJsonp=window.webpackJsonp||[]).push([[156],{512:function(e,a,t){"use strict";t.r(a);var n=t(43),l=Object(n.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"通话管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通话管理"}},[e._v("#")]),e._v(" 通话管理")]),e._v(" "),t("h2",{attrs:{id:"通话人数设置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通话人数设置"}},[e._v("#")]),e._v(" 通话人数设置")]),e._v(" "),t("p",[e._v("发起通话前可以通过 maxCallNum 属性设置通话的最大人数，默认为 1。如果是视频通话，最大人数只能是 1，如果是语音通话，最大人数为\n2。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("call.maxCallNum = 1;\n")])])]),t("p",[e._v("当通话超过最大人数时：")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("呼出会失败，原因为 JCCallReasonCallOverLimit（超过通话数限制）。")])]),e._v(" "),t("li",[t("p",[e._v("收到来电会自动拒绝，原因为 JCCallReasonBusy（忙）。")])])]),e._v(" "),t("h2",{attrs:{id:"通话过程控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通话过程控制"}},[e._v("#")]),e._v(" 通话过程控制")]),e._v(" "),t("h3",{attrs:{id:"通话静音"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通话静音"}},[e._v("#")]),e._v(" 通话静音")]),e._v(" "),t("p",[e._v("通过下面的方法开启或关闭静音，开启关闭静音需要根据 JCCallItem\n中的静音状态（"),t("a",{attrs:{href:"https://developer.juphoon.com/portal/reference/V2.1/ios/Classes/JCCallItem.html#//api/name/mute:",target:"_blank",rel:"noopener noreferrer"}},[e._v("mute"),t("OutboundLink")],1),e._v("）来决定，静音开启后，对方将听不到您的声音")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("/**\n *  @brief 静音，通过 JCCallItem 对象中的静音状态来决定开启关闭静音\n *  @param item JCCallItem 对象\n *  @return 返回 true 表示正常执行调用流程，false 表示调用异常\n */\n-(bool)mute:(JCCallItem* __nonnull)item;\n")])])]),t("h3",{attrs:{id:"通话录音"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通话录音"}},[e._v("#")]),e._v(" 通话录音")]),e._v(" "),t("p",[e._v("可以在通话中进行录音，开启或关闭录音需要根据当前的录音状态（audioRecord）来决定。如果正在录制或者通话被挂起或者挂起的情况下，不能进行音频录制。录音状态可通过\n"),t("a",{attrs:{href:"https://developer.juphoon.com/portal/reference/V2.1/ios/Classes/JCCallItem.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("JCCallItem"),t("OutboundLink")],1),e._v("\n对象获取。")]),e._v(" "),t("p",[e._v("开启或关闭录音接口如下")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("/**\n * 语音通话录音，通过 JCCallItem 对象中的audioRecord状态来决定开启关闭录音\n *\n * @param item              JCCallItem 对象\n * @param enable            开启关闭录音\n * @param filePath          录音文件路径\n * @return                  返回 true 表示正常执行调用流程，false 表示调用异常\n */\n-(bool)audioRecord:(JCCallItem* __nonnull)item enable:(bool)enable filePath:(NSString* __nullable)filePath;\n")])])]),t("p",[e._v("示例代码:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('// 语音录制\n- (void)audioRecord:(JCCallItem* __nonnull)item {\n    if (item.audioRecord) { // 正在录制中\n       //可以做录音结束的处理\n       [call audioRecord:item enable:false filePath:@"your filePath"];\n        ...\n    } else { // 未在录制中\n        // 创建录音文件\n        NSString *filePath; // 录音文件的绝对路径，SDK会自动创建录音文件\n        if (filePath != nil) {\n           // 开始录音\n           [call audioRecord:item enable:true filePath:filePath];\n            ...\n        } else {\n            // 录音失败的处理\n        }\n    }\n}\n')])])]),t("p",[e._v("开启或关闭录音时，录音状态会发生改变，并通过 onCallItemUpdate 回调上报")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("/**\n *  @brief 通话状态更新回调（当上层收到此回调时，可以根据 JCCallItem 对象获得该通话的所有信息及状态，从而更新该通话相关UI）\n *  @param item JCCallItem 对象\n *  @param changeParam 更新标识类\n */\n-(void)onCallItemUpdate:(JCCallItem* __nonnull)item changeParam:(JCCallChangeParam * __nullable)changeParam;\n")])])]),t("hr"),e._v(" "),t("h3",{attrs:{id:"开启-关闭呼叫保持"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开启-关闭呼叫保持"}},[e._v("#")]),e._v(" 开启/关闭呼叫保持")]),e._v(" "),t("p",[e._v("调用下面的方法对通话对象进行呼叫保持或解除呼叫保持（当通话对象处于被保持状态（即状态为held）时不可以进行此操作），开启或关闭呼叫保持需要根据\nJCCallItem\n对象中（"),t("a",{attrs:{href:"http://developer.juphoon.com/portal/reference/ios/Classes/JCCallItem.html#//api/name/hold",target:"_blank",rel:"noopener noreferrer"}},[e._v("hold"),t("OutboundLink")],1),e._v("）的呼叫保持状态来决定")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("/**\n *  @brief                  呼叫保持，通过 JCCallItem 对象中的呼叫保持状态来决定开启关闭呼叫保持\n *  @param item             JCCallItem 对象\n *  @return                 返回 true 表示正常执行调用流程，false 表示调用异常\n */\n-(bool)hold:(JCCallItem* __nonnull)item;\n")])])]),t("h3",{attrs:{id:"切换活跃通话"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#切换活跃通话"}},[e._v("#")]),e._v(" 切换活跃通话")]),e._v(" "),t("p",[e._v("调用下面的方法对通话中被保持的对象和活跃的通话对象进行切换")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("/**\n *  @brief 切换活跃通话\n *  @param item 需要变为活跃状态的 JCCallItem 对象\n *  @return 返回 true 表示正常执行调用流程，false 表示调用异常\n */\n-(bool)becomeActive:(JCCallItem* __nonnull)item;\n")])])]),t("hr"),e._v(" "),t("h3",{attrs:{id:"通话中发送消息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通话中发送消息"}},[e._v("#")]),e._v(" 通话中发送消息")]),e._v(" "),t("p",[e._v("调用下面的接口在通话中实现发消息的功能")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("/**\n *  @brief 通过通话建立的通道发送数据\n *  @param item 需要发送数据的 JCCallItem 对象\n *  @param type 文本消息类型，用户可以自定义，例如text、xml等\n *  @param content 消息内容\n *  @return 返回 true 表示正常执行调用流程，false 表示调用异常\n */\n-(bool)sendMessage:(JCCallItem * __nonnull)item type:(NSString * __nonnull)type content:(NSString * __nonnull)content;\n")])])]),t("p",[e._v("当通话中收到消息时，会收到 onMessageReceive 回调")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("/**\n *  @brief 通话中收到消息的回调\n *  @param item JCCallItem 对象\n *  @param type 消息类型\n *  @param content 消息内容\n */\n-(void)onMessageReceive:(JCCallItem * __nonnull)item type:(NSString * __nonnull)type content:(NSString * __nonnull)content;\n")])])]),t("p",[e._v("示例代码:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('[call sendMessage:item type:@"text" content:@"消息内容"];\n')])])]),t("hr"),e._v(" "),t("h3",{attrs:{id:"相关回调"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#相关回调"}},[e._v("#")]),e._v(" 相关回调")]),e._v(" "),t("p",[e._v("通话过程中，如果通话状态发生了改变，如开启关闭静音、开启关闭通话保持、活跃状态切换、网络变化等，将会收到通话状态更新的回调")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("/**\n *  @brief 通话状态更新回调（当上层收到此回调时，可以根据 JCCallItem 对象获得该通话的所有信息及状态，从而更新该通话相关UI）\n *  @param item JCCallItem 对象\n *  @param changeParam 更新标识类\n */\n-(void)onCallItemUpdate:(JCCallItem* __nonnull)item changeParam:(JCCallChangeParam * __nullable)changeParam;\n")])])]),t("p",[e._v("关于 JCCallChangeParam 的说明请参考 JCCallItem.h 文件。")]),e._v(" "),t("p",[e._v("Note")]),e._v(" "),t("p",[e._v("静音状态、通话保持状态、活跃状态可通过\n"),t("a",{attrs:{href:"https://developer.juphoon.com/portal/reference/V2.1/ios/Classes/JCCallItem.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("JCCallItem"),t("OutboundLink")],1),e._v("\n对象获得。")]),e._v(" "),t("p",[e._v("示例代码:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("-(void)onCallItemUpdate:(JCCallItem* __nonnull)item changeParam:(JCCallChangeParam * __nullable)changeParam {\n    JCCallItem* callItem = item;\n    if (changeParam.mute) { // 开启静音\n        ...\n    } else if (changeParam.sate) { // 通话状态变化\n        ...\n    } else if (changeParam.held) { // 被挂起变化\n        ...\n    } else if (changeParam.active) { // 活跃状态变化\n        ...\n    } else if (changeParam.netStatus) { // 网络状态变化\n        ...\n    }\n    ...\n}\n")])])]),t("hr")])}),[],!1,null,null,null);a.default=l.exports}}]);