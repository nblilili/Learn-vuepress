(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{306:function(e,n,t){e.exports=t.p+"assets/img/ios_login.3a64d080.png"},307:function(e,n,t){e.exports=t.p+"assets/img/ios_logout.e358fc40.png"},707:function(e,n,t){"use strict";t.r(n);var a=t(43),r=Object(a.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"登录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#登录"}},[e._v("#")]),e._v(" 登录")]),e._v(" "),a("p",[e._v("本章节介绍如何初始化 JC SDK 并登录。")]),e._v(" "),a("h2",{attrs:{id:"初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[e._v("#")]),e._v(" 初始化")]),e._v(" "),a("p",[e._v("在调用初始化方法前需要先继承 JCClientCallback 对象，然后实现 JCClientCallback 对象中的纯虚函数。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("class JCManager : public JCClientCallback\n{\npublic:\n    //单例管理类\n    JCManager();\n    ~JCManager();\n\n    static std::shared_ptr<JCManager> shared();\n    bool initialize();\n    void uninitialize();\n    //登录回调\n    virtual void onLogin(bool result, JCClientReason reason);\n    //登出回调\n    virtual void onLogout(JCClientReason reason);\n    //登录状态变化回调\n    virtual void onClientStateChange(JCClientState state, JCClientState oldState);\n\npublic:\n    //JCClient 对象\n    JCClient* client;\n};\n")])])]),a("p",[e._v("然后在主线程调用 JCClientImpl 类中的\n"),a("a",{attrs:{href:"https://developer.juphoon.com/portal/reference/V2.1/windows/C++/html/_j_c_client_8h.html#a2d6fc4f203884536ff69bfe0e0ed300f",target:"_blank",rel:"noopener noreferrer"}},[e._v("createJCClient"),a("OutboundLink")],1),e._v("\n方法，传入获取到的 "),a("code",[e._v("appKey")]),e._v(" 进行 JC SDK 的初始化。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('bool JCManager::initialize()\n{\n    //初始化\n    client = createJCClient("用户 appKey", this, NULL);\n    if (client->getState() == JCClientStateNotInit) {\n        return false;\n    }\n    return true;\n}\n\n//登录结果回调\nvoid JCManager::onLogin(bool result, JCClientReason reason) {\n}\n//登出结果回调\nvoid JCManager::onLogout(JCClientReason reason) {\n}\n//登录状态变化回调\nvoid JCManager::onClientStateChange(JCClientState state, JCClientState oldState) {\n}\n')])])]),a("p",[e._v("初始化成功后，JCClient 状态变为 JCClientStateIdle（未登录状态）。")]),e._v(" "),a("h2",{attrs:{id:"发起登录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#发起登录"}},[e._v("#")]),e._v(" 发起登录")]),e._v(" "),a("p",[e._v("SDK 初始化之后，即可进行登录的集成。登录接口调用流程如下所示：")]),e._v(" "),a("p",[a("img",{attrs:{src:t(306),alt:"../../../../_images/ios_login.png"}})]),e._v(" "),a("p",[e._v("先创建\n"),a("a",{attrs:{href:"https://developer.juphoon.com/portal/reference/V2.1/windows/C++/html/class_j_c_client_login_param.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("JCClientLoginParam"),a("OutboundLink")],1),e._v("\n对象以设置登录参数。然后调用\n"),a("a",{attrs:{href:"https://developer.juphoon.com/portal/reference/V2.1/windows/C++/html/class_j_c_client.html#ad612e9957623869289103fbf0721d902",target:"_blank",rel:"noopener noreferrer"}},[e._v("login"),a("OutboundLink")],1),e._v("\n发起登录:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('//登录\nvoid JCSampleDlg::OnBnClickedButtonLogin()\n{\n    int state = JCManager::shared()->client->getState();\n    if (state == JCClientStateIdle) {\n        JCClientLoginParam* loginParam = new JCClientLoginParam();\n        // 1. 设置服务器环境\n        loginParam->serverAddress = "服务器地址";\n        // 2. 发起登录\n        JCManager::shared()->client->login("用户名", "123", loginParam);\n    }\n    else {\n        // 如果已经登录则登出\n        JCManager::shared()->client->logout();\n    }\n}\n')])])]),a("p",[e._v("Note")]),e._v(" "),a("p",[e._v("1.环境设置：")]),e._v(" "),a("blockquote",[a("ul",[a("li",[a("p",[e._v("国内环境 "),a("a",{attrs:{href:"http:cn.router.justalkcloud.com:8080",target:"_blank",rel:"noopener noreferrer"}},[e._v("http:cn.router.justalkcloud.com:8080"),a("OutboundLink")],1),e._v(" （默认）")])]),e._v(" "),a("li",[a("p",[e._v("国际环境 "),a("a",{attrs:{href:"http:intl.router.justalkcloud.com:8080",target:"_blank",rel:"noopener noreferrer"}},[e._v("http:intl.router.justalkcloud.com:8080"),a("OutboundLink")],1)])])])]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[e._v("userID 不能为空，可由英文、数字和 "),a("code",[e._v("+")]),e._v(" 、 "),a("code",[e._v("-")]),e._v(" 、 "),a("code",[e._v("_")]),e._v(" 、 "),a("code",[e._v(".")]),e._v("\n组成（特殊字符不能作为第一个字符），大小写不敏感，长度不能超过\n64 个字符。")])]),e._v(" "),a("li",[a("p",[e._v("password 不能超过 128 个字符。")])]),e._v(" "),a("li",[a("p",[e._v("调用该接口返回 true 时只代表调用接口成功，并不代表登录成功。登录的结果会通过 onLogin 回调上报。")])])]),e._v(" "),a("p",[e._v("调用接口成功后，首先会触发登录状态改变回调\n"),a("a",{attrs:{href:"https://developer.juphoon.com/portal/reference/V2.1/windows/C++/html/class_j_c_client_callback.html#ace087f907d2f8a2413f10d34cfb47337",target:"_blank",rel:"noopener noreferrer"}},[e._v("onClientStateChange"),a("OutboundLink")],1),e._v("\n，你可以在该回调中执行逻辑操作。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("void JCManager::onClientStateChange(JCClientState state, JCClientState oldState) {\n     if (state == JCClient.STATE_IDLE) { // 未登录\n       ...\n    } else if (state == JCClientStateLogining) { // 正在登录\n       ...\n    } else if (state == JCClientStateLogined) { // 登录成功\n       ...\n    } else if (state == JCClientStateLogouting) { // 登出中\n       ...\n    }\n}\n")])])]),a("p",[e._v("之后触发\n"),a("a",{attrs:{href:"https://developer.juphoon.com/portal/reference/V2.1/windows/C++/html/class_j_c_client_callback.html#ab2deb2e2d3c95f848d9dc2baa7c6daff",target:"_blank",rel:"noopener noreferrer"}},[e._v("onLogin"),a("OutboundLink")],1),e._v("\n回调。你可以在该回调中执行逻辑操作。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("void JCManager::onLogin(bool result, JCClientReason reason) {\n    if (result) {/// 登录成功\n        ...\n    }\n    if (reason == JCClientReasonAuth) {// 账号密码错误\n        ...\n    }\n}\n")])])]),a("p",[e._v("登录成功后，JCClientState 状态从 JCClientStateIdle（未登录）变为\nJCClientStateLogined（登录成功）。SDK\n会自动保持与服务器的连接状态，直到用户主动调用登出接口，或者因为帐号在其他设备登录导致该设备登出。登录成功/失败原因\n参考\n"),a("a",{attrs:{href:"https://developer.juphoon.com/portal/reference/V2.1/windows/C++/html/_j_c_client_constants_8h.html#a8b1b44e57fff02634fd4637428a70020",target:"_blank",rel:"noopener noreferrer"}},[e._v("JCClientReason"),a("OutboundLink")],1),e._v("\n。")]),e._v(" "),a("h2",{attrs:{id:"登出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#登出"}},[e._v("#")]),e._v(" 登出")]),e._v(" "),a("p",[e._v("登出接口调用流程如下所示：")]),e._v(" "),a("p",[a("img",{attrs:{src:t(307),alt:"../../../../_images/ios_logout.png"}})]),e._v(" "),a("p",[e._v("调用\n"),a("a",{attrs:{href:"https://developer.juphoon.com/portal/reference/V2.1/windows/C++/html/class_j_c_client.html#abac015a13078c84b06afac69dcd392ff",target:"_blank",rel:"noopener noreferrer"}},[e._v("logout"),a("OutboundLink")],1),e._v("\n发起登出")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("JCManager::shared()->client->logout();\n")])])]),a("p",[e._v("登出结果回调")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("void JCManager::onLogout(JCClientReason reason) {\n    if (reason == JCClientReasonServerLogout) {// 强制登出\n        ...\n    }\n}\n")])])]),a("p",[e._v("登出原因请参考："),a("a",{attrs:{href:"https://developer.juphoon.com/portal/reference/V2.1/windows/C++/html/_j_c_client_constants_8h.html#a8b1b44e57fff02634fd4637428a70020",target:"_blank",rel:"noopener noreferrer"}},[e._v("JCClientReason"),a("OutboundLink")],1),e._v("。")]),e._v(" "),a("p",[e._v("登出成功后，JCClientState 状态从 JCClientStateLogined（登录成功） 变为\nJCClientStateIdle（未登录）。")])])}),[],!1,null,null,null);n.default=r.exports}}]);