(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{313:function(a,e,n){a.exports=n.p+"assets/img/rotateset.2711a380.png"},736:function(a,e,n){"use strict";n.r(e);var t=n(43),i=Object(t.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"视频管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#视频管理"}},[a._v("#")]),a._v(" 视频管理")]),a._v(" "),t("h2",{attrs:{id:"视频数据采集管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#视频数据采集管理"}},[a._v("#")]),a._v(" 视频数据采集管理")]),a._v(" "),t("h3",{attrs:{id:"设置要开启的摄像头类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设置要开启的摄像头类型"}},[a._v("#")]),a._v(" 设置要开启的摄像头类型")]),a._v(" "),t("p",[a._v("视频采集设置前，可以通过 JCMediaDevice 类中的属性和方法获取摄像头列表、当前摄像头以及默认摄像头，具体如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("/**\n * 获取摄像头列表\n *\n * @return 摄像头列表\n */\npublic abstract List<JCMediaDeviceCamera> getCameras();\n\n/**\n * 当前默认的摄像头\n *\n * @return 当前摄像头\n */\npublic abstract JCMediaDeviceCamera getCamera();\n\n/**\n * 默认摄像头\n */\npublic JCMediaDeviceCamera defaultCamera;\n")])])]),t("p",[a._v("其中，摄像头对象（JCMediaDeviceCamera）有以下属性")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("/*摄像头id*/\npublic String cameraId;\n/*摄像头名字*/\npublic String cameraName;\n/*摄像头类型*/\npublic @CameraType int cameraType;\n")])])]),t("p",[a._v("CameraType（摄像头类型）有以下几种")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("/**\n * 未获取到摄像头\n */\npublic static final int CAMERA_NONE = 0;\n/**\n * 前置摄像头\n */\npublic static final int CAMERA_FRONT = 1;\n/**\n * 后置摄像头\n */\npublic static final int CAMERA_BACK = 2;\n/**\n * 未知摄像头\n */\npublic static final int CAMERA_UNKNOWN = 3;\n")])])]),t("p",[a._v("获取摄像头列表后，可以调用下面的方法获得列表中的摄像头类型")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("/**\n * 获得摄像头类型\n *\n * @param cameraIndex 摄像头队列索引\n * @return 摄像头类型\n */\n@CameraType\npublic abstract int getCameraType(int cameraIndex);\n")])])]),t("p",[a._v("如果想切换摄像头，调用下面的方法切换指定的摄像头")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("/**\n * 切换摄像头\n * @param camera 摄像头\n * @return 成功返回 true，失败返回 false\n */\npublic abstract boolean switchCamera(JCMediaDeviceCamera camera);\n")])])]),t("p",[a._v("示例代码:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("JCMediaDeviceCamera item = new JCMediaDeviceCamera();\nitem.cameraType = JCMediaDevice.CAMERA_FRONT;\nList<JCMediaDevice.JCMediaDeviceCamera> cameras = mediaDevice.getCameras();\nmediaDevice.defaultCamera = cameras.get(0);\n")])])]),t("h3",{attrs:{id:"设置摄像头采集分辨率"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设置摄像头采集分辨率"}},[a._v("#")]),a._v(" 设置摄像头采集分辨率")]),a._v(" "),t("p",[a._v("您可以通过自定义摄像头采集参数实现不同的视频分辨率，如采集的高度、宽度和帧速率。")]),a._v(" "),t("p",[a._v("摄像头采集属性设置接口如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("/**\n * 设置摄像头采集属性\n * @param width     采集宽度，默认640\n * @param height    采集高度，默认360\n * @param frameRate 采集帧速率，默认30\n */\npublic abstract void setCameraProperty(int width, int height, int frameRate);\n")])])]),t("p",[a._v("示例代码")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("// 设置摄像头采集属性\nmediaDevice.setCameraProperty(640, 360, 30);\n")])])]),t("h3",{attrs:{id:"设置视频窗体角度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设置视频窗体角度"}},[a._v("#")]),a._v(" 设置视频窗体角度")]),a._v(" "),t("p",[a._v("调用下面的接口设置视频窗体角度")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("/**\n * 设置视频窗体角度\n *\n * @param angle 参看 @VideoAngle\n */\npublic abstract void setlVideoAngle(@VideoAngle int angle);\n")])])]),t("p",[a._v("其中，VideoAngle 有以下几种:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("/** 自动 */\npublic static final int VIDEO_ANGLE_AUTO = -1;\n/** 0度 */\npublic static final int VIDEO_ANGLE_0 = 0;\n/** 90度 */\npublic static final int VIDEO_ANGLE_90 = 90;\n/** 180度 */\npublic static final int VIDEO_ANGLE_180 = 180;\n/** 270度 */\npublic static final int VIDEO_ANGLE_270 = 270;\n")])])]),t("p",[a._v("示例代码")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("// 设置摄像头采集属性\nmediaDevice.setlVideoAngle(JCMediaDevice.VIDEO_ANGLE_0);\n")])])]),t("h3",{attrs:{id:"设置-canvas-旋转角度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设置-canvas-旋转角度"}},[a._v("#")]),a._v(" 设置 Canvas 旋转角度")]),a._v(" "),t("p",[a._v("如果想设置Canvas中画布的角度，需要调用 JCMediaDeviceVideoCanvas 类中的 rotate 接口")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("/**\n * 旋转角度，必须是90的倍数，该角度表示与屏幕正方向旋转后的夹角\n *\n * @param angle 角度值\n */\npublic void rotate(int angle)\n")])])]),t("p",[a._v("其中，角度需为 90 的倍数。调用该接口后，本端显示的本地视频画面和远端视频画面会同时旋转相同的角度，而对端显示的画面不受影响。")]),a._v(" "),t("p",[a._v("例如 A 设置旋转 90 度，则 A 端显示的 A 和 B 视频画面会同时旋转 90 度。而 B 端的视频画面则不会发生任何改变。如下图所示：")]),a._v(" "),t("p",[t("img",{attrs:{src:n(313),alt:"../../../../_images/rotateset.png"}})]),a._v(" "),t("p",[t("strong",[a._v("示例代码")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("// 设置 Canvas 旋转角度\nJCMediaDeviceVideoCanvas canvas = mediaDevice.startCameraVideo(JCMediaDevice.RENDER_FULL_CONTENT));\ncanvas.rotate(90);\n")])])]),t("hr"),a._v(" "),t("h3",{attrs:{id:"原始视频数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原始视频数据"}},[a._v("#")]),a._v(" 原始视频数据")]),a._v(" "),t("p",[a._v("在视频传输过程中，可以对每帧视频数据进行图像处理，以实现美颜等需求。有以下两种处理时机：")]),a._v(" "),t("p",[a._v("1、在视频采集后编码前处理；会影响本地预览和对端接收视频。")]),a._v(" "),t("p",[a._v("2、在解码后渲染前处理；影响本地接收视频。")]),a._v(" "),t("p",[a._v("具体如下：")]),a._v(" "),t("p",[t("strong",[a._v("视频采集后，编码前处理")])]),a._v(" "),t("p",[a._v("参考如下步骤，在你的项目中实现原始视频数据功能：")]),a._v(" "),t("p",[a._v("1.发起业务前通过 ZmfVideo.captureAddCallback 注册视频采集回调，并在该函数中实现一个\nCaptureCallback 类型的回调函数")]),a._v(" "),t("p",[a._v("2.成功注册后，JC SDK 会在捕捉到每个视频帧时通过回调函数回调采集到的原始视频数据相对应参数")]),a._v(" "),t("p",[a._v("3.用户拿到视频数据后，根据场景需要自行在回调函数中进行参数处理，处理后数据通过该回调函数返回给 JC SDK。")]),a._v(" "),t("p",[a._v("首先注册视频采集回调")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("/**\n * add capture data callback\n *\n * @param[in] callback      the callback user data\n *\n * @return                  >= 0 on succeed is handle, otherwise failed.\n */\nZmfVideo.captureAddCallback(CaptureCallback callback);\n")])])]),t("p",[a._v("回调类型说明")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("/**\n * The callback to handle video capture data\n *\n * @param[in] captureId        video capture unique name\n * @param[in] iFace            the capture Face @see ZmfVideoFaceType\n * @param[in] iImgAngle        the image rotated angle\n * @param[in] iCaptureOrient   the capturer fixed orient\n * @param[in,out] iWidthHeight the width and height of image,2 length first width second height\n * @param[in,out] data         the image data I420 buffer\n *\n * @return                     if process capturer data should return true, other false\n */\npublic interface CaptureCallback\n{\n     boolean onFrame(String captureId, int iFace, int iImgAngle, int iCaptureOrient, int[] iWidthHeight, ByteBuffer data);\n}\n")])])]),t("p",[a._v("注册后，每帧采集的视频数据通过 onFrame 回调，可以处理对应的视频数据。")]),a._v(" "),t("p",[a._v("示例代码")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('public boolean onFrame(String captureId, int iFace, int iImgAngle, int iCaptureOrient, int[] iWidthHeight, ByteBuffer data) {\n    System.out.println("视频采集数据处理");\n    return true;\n}\npublic void call() {\n    //注册回调\n    ZmfVideo.captureAddCallback(onFrame);\n    //发起呼叫\n    call.call("peer number", true, "自定义透传字符串");\n}\n')])])]),t("p",[a._v("如果想移除回调，调用下面的接口")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("/**\n * remove capture data callback\n *\n * @param[in]  handle       the handle\n *\n * @return                  0 on succeed, otherwise failed.\n */\nZmfVideo.captureRemoveCallback(int handle)\n")])])]),t("p",[a._v("示例代码")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('public void endCall() {\n    int handle = ZmfVideo.captureAddCallback(onFrame);\n    //移除回调\n    ZmfVideo.captureRemoveCallback(handle);\n    //挂断通话\n    call.term(item, JCCall.REASON_NONE, "自己挂断");\n}\n')])])]),t("p",[t("strong",[a._v("解码后，渲染前处理")])]),a._v(" "),t("p",[a._v("参考如下步骤，在你的项目中实现原始视频数据功能：")]),a._v(" "),t("p",[a._v("1.发起业务前通过 ZmfVideo.renderAddCallback 注册视频输出回调，并在该函数中实现一个 RenderCallback\n类型的回调函数")]),a._v(" "),t("p",[a._v("2.成功注册后，JC SDK 会在捕捉到每个视频帧时通过回调函数回调输出的原始视频数据相对应参数")]),a._v(" "),t("p",[a._v("3.用户拿到视频数据后，根据场景需要自行在回调函数中进行参数处理，处理后数据通过该回调函数返回给JC SDK。")]),a._v(" "),t("p",[a._v("首先注册视频输出回调")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("/**\n * add render data callback\n *\n * @param[in] callback      the callback user data\n *\n * @return                  >= 0 on succeed is handle, otherwise failed.\n */\nZmfVideo.renderAddCallback(RenderCallback callback);\n")])])]),t("p",[a._v("回调类型说明")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("/**\n * The callback to receive video render data\n *\n * @param[in] renderId      video render unique name\n * @param[in] sourceType    video render source type @see ZmfVideoSourceType\n * @param[in] iAngle\n * @param[in] iMirror\n * @param[in] iWidth\n * @param[in] iHeight\n * @param[in] data          I420 render data\n *\n * @return                  if process render data should return true, other false\n *\n * @remarks\n *  if data == null or iWidth <=0 or iHeight <= 0, means the render will close,\n *  so should call onRenderRequestRemove.\n */\npublic interface RenderCallback\n{\n     boolean onFrame(String renderId, int sourceType, int iAngle, int iMirror, int iWidth, int iHeight, ByteBuffer data, int timeStampMs);\n}\n")])])]),t("p",[a._v("注册后，每帧解码后的视频数据通过onFrame回调，可以处理对应的视频数据。")]),a._v(" "),t("p",[a._v("示例代码")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('public boolean onFrame(String renderId, int sourceType, int iAngle, int iMirror, int iWidth, int iHeight, ByteBuffer data, int timeStampMs) {\n    System.out.println("解码后的视频数据处理");\n    return true;\n}\npublic void call() {\n    //注册回调\n    ZmfVideo.renderAddCallback(onFrame);\n    //发起呼叫\n    call.call("peer number", true, "自定义透传字符串");\n}\n')])])]),t("p",[a._v("如果想移除回调，调用下面的接口")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("/**\n * remove render data callback\n *\n * @param[in]  handle       the handle\n *\n * @return                  0 on succeed, otherwise failed.\n */\nZmfVideo.renderRemoveCallback(int handle)\n")])])]),t("p",[a._v("示例代码")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('public void endCall() {\n    int handle = ZmfVideo.renderAddCallback(onFrame);\n    //移除回调\n    ZmfVideo.renderRemoveCallback(handle)\n    //挂断通话\n    call.term(item, JCCall.REASON_NONE, "自己挂断");\n}\n')])])]),t("h3",{attrs:{id:"自定义视频采集和渲染"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义视频采集和渲染"}},[a._v("#")]),a._v(" 自定义视频采集和渲染")]),a._v(" "),t("p",[a._v("自定义视频采集和渲染")]),a._v(" "),t("p",[a._v("对于不支持系统标准 API 的视频采集/渲染设备，或者想利用已经采集好的 I420 或 h264\n数据，可另起采集/渲染线程，把采集/渲染数据放入\nJuphoon 对应的接口中进行后续操作。")]),a._v(" "),t("p",[a._v("参考如下步骤，在你的项目中实现自定义视频源功能：")]),a._v(" "),t("p",[a._v("1.通过JC SDK 提供的接口将外部设备采集/准备渲染的数据输入到 JC SDK 进行后续操作。")]),a._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[a._v("如果想停止外部设备采集/准备渲染的数据输入，则调用JC SDK 提供的接口停止数据输入即可。")])]),a._v(" "),t("p",[a._v("在登录成功后，Zmf_VideoInitialize 初始化成功后，把采集/准备渲染的数据通过下面的接口输入；")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("/**\n * The video capture data entry to ZMF\n *\n * @param[in] captureId     unique name of the video capture               //标识外部采集的ID\n * @param[in] iCaptureFace the capture face, @see ZmfVideoFaceType         //外部视频的朝向，一般取0\n * @param[in] iImgAngle     the image rotated angle (CW)                   //输入的外部视频正立所需旋转角度，顺时针为正， 取值范围0，90，180，270\n * @param[in] iCamAngle     the camera fixed orient                        //外部镜头固定角度，同iImgAngle，取值范围0，90，180，270\n * @param[in,out] iWidthHeight the image input size, at least align 4.\n *                             return the cropped height of data           //图像宽高，0为宽，1为高\n * @param[in] data          the image data buffer                          //图像buffer\n * @param[in] encoderName  the image ecoder type buffer                    //图像编码类型，H264为h264,其他为I420\n */\nstatic public void onVideoCapture (String captureId, int iCaptureFace,\n        int iImgAngle, int iCamAngle, int[] iWidthHeight, ByteBuffer data, String encoderName, int[] encoderCfg)\n")])])]),t("p",[a._v("示例代码")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('// 初始化视频设备\nandroid.content.Context activity;\nZmfVideo.initialize(activity);\npublic void call() {\n    //输入分辨率为640*360，编码为I420无需额外旋转的图像\n    onVideoCapture("Test",0,0,0,640,360,buf,0);\n    //发起通话\n    call.call("peer number", true, "自定义透传字符串");\n}\n')])])]),t("p",[a._v("采集停止接口")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("/**\n * tell ZMF the video capture has stopped\n *\n * @param[in] captureId     unique name of the device\n */\nvoid Zmf_OnVideoCaptureDidStop(const char *captureId);\n")])])]),t("p",[a._v("示例代码")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('public void endCall() {\n    //停止视频采集\n    Zmf_OnVideoCaptureDidStop("Test");\n    //挂断通话\n    call.term(item, JCCall.REASON_NONE, "自己挂断");\n}\n')])])]),t("p",[a._v("如果想在视频渲染端使用自己的渲染方式，则调用下面的接口：")]),a._v(" "),t("p",[a._v("视频数据渲染接口")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("/**\n * The video render data entry to ZMF\n *\n * @param[in] renderId      unique name of the render source            //标识渲染的ID\n * @param[in] sourceType    the source type, @see ZmfRenderSource       //渲染源类型，一般为0\n * @param[in] iAngle        the image rotated angle (CW)                //渲染正立所需角度，一般为0 取值范围0，90，180，270\n * @param[in] iMirror       the camera fixed orient                     //渲染镜像类型，一般为0\n * @param[in] iWidth        the image width                             //渲染图像宽\n * @param[in] iHeight       the image height                            //渲染图像高\n * @param[in] data          the image data buffer                       //渲染数据buffer\n */\nstatic public void onRender(String renderId, int sourceType, int iAngle, int iMirror,\n                                            int iWidth, int iHeight, ByteBuffer data)\n")])])]),t("p",[a._v("示例代码")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('// 初始化视频设备\nandroid.content.Context activity;\nZmfVideo.initialize(activity);\npublic void call() {\n    //输入分辨率为640*360，编码为I420无需额外旋转的图像\n    onRender("Test",0,0,0,640,360,buf,0);\n    //发起呼叫\n    call.call("peer number", true, "自定义透传字符串");\n}\n')])])]),t("p",[a._v("渲染数据停止接口")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("//Zmf_OnVideoRender，renderId/sourceType同上，后面传0。\nZmfVideo.onRender(String renderId, 0, 0, 0, 0, 0, 0, 0);\n")])])]),t("p",[a._v("示例代码")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('public void endCall() {\n    //停止渲染\n    ZmfVideo.onRender("Test", 0, 0, 0, 0, 0, 0, 0);\n    挂断通话\n    call.term(item, JCCall.REASON_NONE, "自己挂断");\n}\n')])])]),t("hr"),a._v(" "),t("h2",{attrs:{id:"视频渲染管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#视频渲染管理"}},[a._v("#")]),a._v(" 视频渲染管理")]),a._v(" "),t("h3",{attrs:{id:"创建本地和远端视频画面"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建本地和远端视频画面"}},[a._v("#")]),a._v(" 创建本地和远端视频画面")]),a._v(" "),t("ul",[t("li",[a._v("本地视频渲染")])]),a._v(" "),t("p",[a._v("本地视频渲染通过调用 startCameraVideo 接口获得本地视频对象用于 UI 界面显示，"),t("strong",[a._v("该接口会打开摄像头")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("/**\n * 获得视频预览对象，通过此对象能获得视频用于UI显示\n *\n * @param renderType    渲染模式\n * @return              JCMediaDeviceVideoCanvas 对象\n * @see RenderType\n */\npublic abstract JCMediaDeviceVideoCanvas startCameraVideo(@RenderType int renderType);\n")])])]),t("p",[a._v("其中，渲染模式（JCMediaDeviceRender)有以下三种")]),a._v(" "),t("table",[t("colgroup",[t("col",{staticStyle:{width:"50%"}}),a._v(" "),t("col",{staticStyle:{width:"50%"}})]),a._v(" "),t("thead",[t("tr",{staticClass:"header"},[t("th",[t("p",[a._v("名称")])]),a._v(" "),t("th",[t("p",[a._v("描述")])])])]),a._v(" "),t("tbody",[t("tr",{staticClass:"odd"},[t("td",[t("p",[a._v("public static final int RENDER_FULL_SCREEN = 0")])]),a._v(" "),t("td",[t("p",[a._v("铺满窗口")])])]),a._v(" "),t("tr",{staticClass:"even"},[t("td",[t("p",[a._v("public static final int RENDER_FULL_CONTENT = 1")])]),a._v(" "),t("td",[t("p",[a._v("全图像显示，会有黑边，但在窗口跟图像比例相同的情况下不会有黑边")])])]),a._v(" "),t("tr",{staticClass:"odd"},[t("td",[t("p",[a._v("public static final int RENDER_FULL_AUTO = 2")])]),a._v(" "),t("td",[t("p",[a._v("自适应")])])])])]),a._v(" "),t("ul",[t("li",[a._v("远端视频渲染")])]),a._v(" "),t("p",[a._v("您可以调用 startVideo 方法获取对端视频对象并进行渲染")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("/**\n * 获得视频对象，通过此对象能获得视频用于UI显示\n *\n * @param videoSource   渲染标识串，比如 JCMediaChannelParticipant JCCallItem 中的 renderId\n * @param renderType    渲染模式\n * @return              JCMediaDeviceVideoCanvas 对象\n * @see RenderType\n */\npublic abstract JCMediaDeviceVideoCanvas startVideo(String videoSource, @RenderType int renderType);\n")])])]),t("hr"),a._v(" "),t("p",[t("strong",[a._v("示例代码")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("// 打开本地视频预览\nJCMediaDeviceVideoCanvas localCanvas = mediaDevice.startCameraVideo(JCMediaDevice.RENDER_FULL_CONTENT);\nviewGroup.addView(localCanvas.getVideoView(), 0);\n// 远端视频渲染，renderId来源于通话对象，一对一为JCCallItem对象，多方为JCMediaChannelParticipant对象\nJCMediaDeviceVideoCanvas remoteCanvas = mediaDevice.startVideo(renderId, JCMediaDevice.RENDER_FULL_CONTENT);\nviewGroup.addView(remoteCanvas.getVideoView(), 0);\n")])])]),t("hr"),a._v(" "),t("h3",{attrs:{id:"销毁本地和远端视频画面"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#销毁本地和远端视频画面"}},[a._v("#")]),a._v(" 销毁本地和远端视频画面")]),a._v(" "),t("p",[a._v("在视频通话结束或者视频通话中，如果想销毁视频画面，可以调用下面的接口")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("/**\n * 停止视频\n *\n * @param canvas JCMediaDeviceVideoCanvas 对象，由 startVideo 获得\n */\npublic abstract void stopVideo(JCMediaDeviceVideoCanvas canvas);\n")])])]),t("p",[a._v("示例代码:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("JCMediaDeviceVideoCanvas localCanvas = mediaDevice.startCameraVideo(JCMediaDevice.RENDER_FULL_CONTENT);\nJCMediaDeviceVideoCanvas remoteCanvas = mediaDevice.startVideo(renderId, JCMediaDevice.RENDER_FULL_CONTENT);\nif (localCanvas != null) {\n    mContentView.removeView(localCanvas.getVideoView());\n    mediaDevice.stopVideo(localCanvas);\n    localCanvas = null;\n\nif (remoteCanvas != null) {\n    mContentView.removeView(remoteCanvas.getVideoView());\n    mediaDevice.stopVideo(remoteCanvas);\n    remoteCanvas = null;\n}\n")])])]),t("hr"),a._v(" "),t("h3",{attrs:{id:"暂停渲染"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#暂停渲染"}},[a._v("#")]),a._v(" 暂停渲染")]),a._v(" "),t("p",[a._v("如果暂停画面的渲染，可以调用下面的接口：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("/**\n * 暂停视频渲染\n */\npublic void pause();\n")])])]),t("h3",{attrs:{id:"恢复渲染"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#恢复渲染"}},[a._v("#")]),a._v(" 恢复渲染")]),a._v(" "),t("p",[a._v("如果想对已暂停的画面继续进行渲染，可以调用下面的接口：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("/**\n * 继续视频渲染\n */\npublic void resume();\n")])])]),t("hr"),a._v(" "),t("h2",{attrs:{id:"视频设备管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#视频设备管理"}},[a._v("#")]),a._v(" 视频设备管理")]),a._v(" "),t("p",[a._v("视频设备管理主要用到 JCMediaDevice 类中的方法，具体如下：")]),a._v(" "),t("h3",{attrs:{id:"获取摄像头列表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#获取摄像头列表"}},[a._v("#")]),a._v(" 获取摄像头列表")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("/**\n * 获取摄像头列表\n *\n * @return 摄像头列表\n */\npublic abstract List<JCMediaDeviceCamera> getCameras();\n")])])]),t("p",[a._v("示例代码")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("获取摄像头列表\nList<JCMediaDeviceCamera> cameras = mediaDevice.getCameras();\n")])])]),t("h3",{attrs:{id:"获取当前默认的摄像头"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#获取当前默认的摄像头"}},[a._v("#")]),a._v(" 获取当前默认的摄像头")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("/**\n * 当前默认的摄像头\n *\n * @return 当前摄像头\n */\npublic abstract JCMediaDeviceCamera getCamera();\n")])])]),t("p",[a._v("示例代码")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("获取摄像头列表\nJCMediaDeviceCamera camera = mediaDevice.getCamera();\n")])])]),t("h3",{attrs:{id:"开启关闭摄像头"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开启关闭摄像头"}},[a._v("#")]),a._v(" 开启关闭摄像头")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("/**\n * 开启摄像头\n *\n * @return 成功返回 true，失败返回 false\n */\npublic abstract boolean startCamera();\n\n/**\n * 关闭摄像头\n *\n * @return 成功返回 true，失败返回 false\n */\npublic abstract boolean stopCamera();\n")])])]),t("h3",{attrs:{id:"切换摄像头"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#切换摄像头"}},[a._v("#")]),a._v(" 切换摄像头")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("/**\n * 切换摄像头，内部会根据当前摄像头类型来进行切换\n *\n * @return 成功返回 true，失败返回 false\n */\npublic abstract boolean switchCamera();\n")])])]),t("p",[t("strong",[a._v("示例代码")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("// 打开摄像头\nmediaDevice.startCamera();\n// 关闭摄像头\nmediaDevice.stopCamera();\n// 切换摄像头\nmediaDevice.switchCamera();\n")])])])])}),[],!1,null,null,null);e.default=i.exports}}]);