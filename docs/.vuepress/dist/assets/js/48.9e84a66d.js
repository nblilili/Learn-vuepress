(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{310:function(n,e,t){n.exports=t.p+"assets/img/workflow_login_android.bbb7c782.png"},311:function(n,e,t){n.exports=t.p+"assets/img/workflow_logout_android.8ba24019.png"},669:function(n,e,t){"use strict";t.r(e);var o=t(43),r=Object(o.a)({},(function(){var n=this,e=n.$createElement,o=n._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[o("h1",{attrs:{id:"登录"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#登录"}},[n._v("#")]),n._v(" 登录")]),n._v(" "),o("p",[n._v("本章节将介绍如何初始化 SDK 并登录。")]),n._v(" "),o("h2",{attrs:{id:"初始化"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[n._v("#")]),n._v(" 初始化")]),n._v(" "),o("p",[n._v("在主线程调用\n"),o("a",{attrs:{href:"https://developer.juphoon.com/portal/reference/V2.1/android/com/juphoon/cloud/JCClient.html#create-android.content.Context-java.lang.String-com.juphoon.cloud.JCClientCallback-com.juphoon.cloud.JCClient.CreateParam-",target:"_blank",rel:"noopener noreferrer"}},[n._v("JCClient.create()"),o("OutboundLink")],1),n._v("\n，创建\n"),o("a",{attrs:{href:"https://developer.juphoon.com/portal/reference/V2.1/android/com/juphoon/cloud/JCClient.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("JCClient"),o("OutboundLink")],1),n._v("\n实例对象。传入获取到的 "),o("code",[n._v("appKey")]),n._v(" ，即可初始化\n"),o("a",{attrs:{href:"https://developer.juphoon.com/portal/reference/V2.1/android/com/juphoon/cloud/JCClient.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("JCClient"),o("OutboundLink")],1),n._v("\n。")]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[n._v('// JCClient 对象\nJCClient mClient;\n\n// 初始化函数\npublic boolean initialize(Context context) {\n    // 登录类\n    mClient = JCClient.create(context, "用户 appKey", new JCClientCallback() {\n        @Override\n        public void onLogin(boolean result, int reason) {\n\n        }\n        @Override\n        public void onLogout(int reason) {\n\n        }\n        @Override\n        public void onClientStateChange(int state, int oldState) {\n\n        }\n    }, null);\n    // 获取初始化状态（用来判断初始化状态）\n    mInit = mClient.getState() == JCClient.STATE_IDLE;\n    return mInit;\n}\n')])])]),o("p",[n._v("初始化成功后，JCClient.ClientState 状态从 JCClientStateNotInit（未初始化） 变为\nJCClientStateIdle（未登录）。")]),n._v(" "),o("h2",{attrs:{id:"发起登录"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#发起登录"}},[n._v("#")]),n._v(" 发起登录")]),n._v(" "),o("p",[n._v("SDK 初始化之后，即可进行登录的集成。 登出接口调用流程如下所示：")]),n._v(" "),o("p",[o("img",{attrs:{src:t(310),alt:"../../../../_images/workflow_login_android.png"}})]),n._v(" "),o("p",[n._v("先创建\n"),o("a",{attrs:{href:"https://developer.juphoon.com/portal/reference/V2.1/android/com/juphoon/cloud/JCClient.LoginParam.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("JCClient.LoginParam"),o("OutboundLink")],1),n._v("\n实例以调整登录参数。后调用\n"),o("a",{attrs:{href:"https://developer.juphoon.com/portal/reference/V2.1/android/com/juphoon/cloud/JCClient.html#login-java.lang.String-java.lang.String-com.juphoon.cloud.JCClient.LoginParam-",target:"_blank",rel:"noopener noreferrer"}},[n._v("login()"),o("OutboundLink")],1),n._v("\n，发起登录:")]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[n._v('JCClient.LoginParam loginParam = new JCClient.LoginParam();\n// 1. 设置服务器环境。\nloginParam.serverAddress = "服务器地址";\n// 2. 发起登录\nmClient.login(userID, password, loginParam);\n')])])]),o("p",[n._v("Note")]),n._v(" "),o("ol",[o("li",[o("p",[n._v("环境设置")]),n._v(" "),o("blockquote",[o("ul",[o("li",[o("p",[n._v("国内环境 "),o("code",[n._v("http:cn.router.justalkcloud.com:8080")]),n._v(" （默认）")])]),n._v(" "),o("li",[o("p",[n._v("国际环境 "),o("code",[n._v("http:intl.router.justalkcloud.com:8080")])])])])])]),n._v(" "),o("li",[o("p",[n._v("userID 不能为空，可由英文、数字和 "),o("code",[n._v("+")]),n._v(" 、 "),o("code",[n._v("-")]),n._v(" 、 "),o("code",[n._v("_")]),n._v(" 、 "),o("code",[n._v(".")]),n._v("\n组成（特殊字符不能作为第一个字符），大小写不敏感，长度不能超过\n64 个字符。")])]),n._v(" "),o("li",[o("p",[n._v("password 不能超过 128 个字符。")])]),n._v(" "),o("li",[o("p",[n._v("调用该接口返回 true 时只代表调用接口成功，并不代表登录成功。登录的结果会通过 onLogin 回调上报。")])])]),n._v(" "),o("p",[n._v("调用接口成功后，首先会触发登录状态改变回调\n"),o("a",{attrs:{href:"https://developer.juphoon.com/portal/reference/V2.1/android/com/juphoon/cloud/JCClientCallback.html#onClientStateChange-int-int-",target:"_blank",rel:"noopener noreferrer"}},[n._v("onClientStateChange()"),o("OutboundLink")],1),n._v("\n。您可以通过重写\n"),o("a",{attrs:{href:"https://developer.juphoon.com/portal/reference/V2.1/android/com/juphoon/cloud/JCClientCallback.html#onClientStateChange-int-int-",target:"_blank",rel:"noopener noreferrer"}},[n._v("onClientStateChange()"),o("OutboundLink")],1),n._v("\n执行逻辑操作。")]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[n._v("@Override\npublic void onClientStateChange(@JCClient.ClientState int state, @JCClient.ClientState int oldState) {\n     if (state == JCClient.STATE_IDLE) { // 未登录\n       ...\n    } else if (state == JCClient.STATE_LOGINING) { // 正在登录\n       ...\n    } else if (state == JCClient.STATE_LOGINED) { // 登录成功\n       ...\n    } else if (state == JCClient.STATE_LOGOUTING) { // 登出中\n       ...\n    }\n}\n")])])]),o("p",[n._v("之后触发\n"),o("a",{attrs:{href:"https://developer.juphoon.com/portal/reference/V2.1/android/com/juphoon/cloud/JCClientCallback.html#onLogin-boolean-int-",target:"_blank",rel:"noopener noreferrer"}},[n._v("onLogin()"),o("OutboundLink")],1),n._v("\n回调。您可以通过重写\n"),o("a",{attrs:{href:"https://developer.juphoon.com/portal/reference/V2.1/android/com/juphoon/cloud/JCClientCallback.html#onLogin-boolean-int-",target:"_blank",rel:"noopener noreferrer"}},[n._v("onLogin()"),o("OutboundLink")],1),n._v("\n执行逻辑操作。")]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[n._v("@Override\npublic void onLogin(boolean result, @JCClient.ClientReason int reason) {\n    if (result) {// 登录成功\n        ...\n    }\n    if (reason == REASON_AUTH) {// 账号密码错误\n        ...\n    }\n\n}\n")])])]),o("p",[n._v("登录成功之后，SDK 会自动保持与服务器的连接状态，直到用户主动调用登出接口，或者因为帐号在其他设备登录导致该设备登出。登录成功/失败原因 参考\n"),o("a",{attrs:{href:"https://developer.juphoon.com/portal/reference/V2.1/android/com/juphoon/cloud/JCClient.html#REASON_ANOTHER_DEVICE_LOGINED",target:"_blank",rel:"noopener noreferrer"}},[n._v("JCClient.ClientReason"),o("OutboundLink")],1),n._v("。")]),n._v(" "),o("h2",{attrs:{id:"登出"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#登出"}},[n._v("#")]),n._v(" 登出")]),n._v(" "),o("p",[n._v("登出接口调用流程如下所示：")]),n._v(" "),o("p",[o("img",{attrs:{src:t(311),alt:"../../../../_images/workflow_logout_android.png"}})]),n._v(" "),o("p",[n._v("调用\n"),o("a",{attrs:{href:"https://developer.juphoon.com/portal/reference/V2.1/android/com/juphoon/cloud/JCClient.html#logout--",target:"_blank",rel:"noopener noreferrer"}},[n._v("logout()"),o("OutboundLink")],1),n._v("\n可以发起登出。更多登出原因参考：\n"),o("a",{attrs:{href:"https://developer.juphoon.com/portal/reference/V2.1/android/com/juphoon/cloud/JCClient.html#REASON_ANOTHER_DEVICE_LOGINED",target:"_blank",rel:"noopener noreferrer"}},[n._v("JCClient.ClientReason"),o("OutboundLink")],1)]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[n._v("@Override\npublic void onLogout(@JCClient.ClientReason int reason) {\n    if (reason == REASON_SERVER_LOGOUT) {// 强制登出\n        ...\n    }\n}\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);