(window.webpackJsonp=window.webpackJsonp||[]).push([[276],{441:function(a,t,n){"use strict";n.r(t);var e=n(43),i=Object(e.a)({},(function(){var a=this,t=a.$createElement,n=a._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h1",{attrs:{id:"音频管理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#音频管理"}},[a._v("#")]),a._v(" 音频管理")]),a._v(" "),n("h2",{attrs:{id:"音频数据管理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#音频数据管理"}},[a._v("#")]),a._v(" 音频数据管理")]),a._v(" "),n("h3",{attrs:{id:"原始音频数据"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原始音频数据"}},[a._v("#")]),a._v(" 原始音频数据")]),a._v(" "),n("p",[a._v("在音频传输过程中，可以对采集的音频数据进行处理，以获取不同的播放效果。有两个时机可以进行处理。")]),a._v(" "),n("ol",[n("li",[n("p",[a._v("在音频采集之后，编码之前进行处理；")])]),a._v(" "),n("li",[n("p",[a._v("在传输完成，解码后播放前进行处理。")])])]),a._v(" "),n("p",[a._v("具体如下：")]),a._v(" "),n("ul",[n("li",[a._v("音频采集之后，编码之前的处理")])]),a._v(" "),n("p",[a._v("参考如下步骤，在你的项目中实现原始音频数据功能：")]),a._v(" "),n("p",[a._v("1.发起业务前通过 ZmfAudio.inputAddCallback 注册音频采集回调，并在该函数中实现一个\nZmfAudio.InputCallback 类型的回调函数")]),a._v(" "),n("p",[a._v("2.成功注册后，JC SDK 会在捕捉到音频数据时通过回调函数回调采集到的原始音频数据相对应参数")]),a._v(" "),n("p",[a._v("3.用户拿到音频数据后，根据场景需要自行在回调函数中进行参数处理，处理后数据通过该回调函数返回给JC SDK。")]),a._v(" "),n("p",[a._v("首先注册音频输入回调")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("/**\n * add audio input data callback\n *\n * @param[in] callback      the callback user data\n *\n * @return                  void.\n */\nZmfAudio.inputAddCallback(ZmfAudio.InputCallback var0);\n")])])]),n("p",[a._v("回调类型说明")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("/** the callback to receive audio input data\n * @param[in] inputId         unique name of the audio input\n * @param[in] iSampleRateHz   the sample rate of the pcm data\n * @param[in] iChannels       the channel number of the pcm data\n * @param[in] data             the pcm data\n * @param[in] playDelayMS      the play delay ms\n * @param[in] recDelayMS       the record dely ms\n * @param[in] clockDrift       the clock drift ms\n * @return                     void\n */\npublic interface InputCallback\n{\n    void onAudioInputFrame(String inputId, int sampleRateHz, int iChannels, ByteBuffer data, int playDelayMS, int recDelayMS, int clockDrift);\n}\n")])])]),n("p",[a._v("示例代码")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v('public void onAudioInputFrame(String inputId, int sampleRateHz, int iChannels, ByteBuffer data, int playDelayMS, int recDelayMS, int clockDrift) {\n    System.out.println("音频采集数据处理");\n}\npublic void call() {\n    //注册回调\n    ZmfAudio.inputAddCallback(onAudioInputFrame);\n    //发起呼叫\n    call.call("peer number", true, "自定义透传字符串");\n}\n')])])]),n("p",[a._v("回调注册后，当有音频数据采集进来时，可以对音频数据进行处理。")]),a._v(" "),n("p",[a._v("如果想移除回调，调用下面的接口")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("/**\n * remove input audio data callback\n *\n * @param[in]  callback      the callback user data\n *\n * @return                  void.\n */\nZmfAudio.inputRemoveCallback(ZmfAudio.InputCallback var0);\n")])])]),n("p",[a._v("示例代码")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v('public void endCall() {\n    //移除回调\n    ZmfAudio.inputRemoveCallback(onAudioInputFrame);\n    JCCallItem item = call.getCallItems().get(0);\n    // 挂断通话\n    call.term(item, JCCall.REASON_NONE, "自己挂断");\n}\n')])])]),n("ul",[n("li",[a._v("解码后播放前的处理")])]),a._v(" "),n("p",[a._v("参考如下步骤，在你的项目中实现原始音频数据功能：")]),a._v(" "),n("p",[a._v("1.发起业务前通过 ZmfAudio.outputAddCallback 注册音频输出回调，并在该函数中实现一个\nZmfAudio.OutputCallback 类型的回调函数")]),a._v(" "),n("p",[a._v("2.成功注册后，JC SDK 会在捕捉到音频数据时通过回调函数回调采集到的原始音频数据相对应参数")]),a._v(" "),n("p",[a._v("3.用户拿到音频数据后，根据场景需要自行在回调函数中进行参数处理，处理后数据通过该回调函数返回给JC SDK。")]),a._v(" "),n("p",[a._v("首先注册音频输出回调")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("/**\n * add audio output data callback\n *\n * @param[in] callback      the callback user data\n *\n * @return                  >= 0 on succeed is handle, otherwise failed.\n */\nZmfAudio.outputAddCallback(ZmfAudio.OutputCallback var0);\n")])])]),n("p",[a._v("回调类型说明")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("/**\n * The callback to receive audio output data\n *\n * @param[in] captureId       audio output unique name\n * @param[in] iSampleRateHz   the sample rate of the pcm data\n * @param[in] iChannels       the channel number of the pcm data\n * @param[in] data            the pcm data\n *\n * @return                    void\n */\npublic interface OutputCallback\n{\n    void onAudioOutputFrame(String outputId, int sampleRateHz, int iChannels, ByteBuffer data);\n}\n")])])]),n("p",[a._v("回调注册后，当有解码后的音频数据进来时，可以进行对应的音频数据处理。")]),a._v(" "),n("p",[a._v("示例代码")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v('public void void onAudioOutputFrame(String outputId, int sampleRateHz, int iChannels, ByteBuffer data) {\n    System.out.println("音频解码后的数据处理");\n}\npublic void call() {\n    //注册回调\n    ZmfAudio.outputAddCallback(onAudioOutputFrame);\n    //发起通话\n    call.call("peer number", true, "自定义透传字符串");\n}\n')])])]),n("p",[a._v("如果想移除回调，调用下面的接口")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("/**\n * remove output audio data callback\n *\n * @param[in] callback      the callback user data\n *\n * @return                  void.\n */\nZmfAudio.outputRemoveCallback(ZmfAudio.OutputCallback var0)\n")])])]),n("p",[a._v("示例代码")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v('public void endCall() {\n    //移除回调\n    ZmfAudio.outputRemoveCallback(onAudioOutputFrame);\n    JCCallItem item = call.getCallItems().get(0);\n    //挂断通话\n    call.term(item, JCCall.REASON_NONE, "自己挂断");\n}\n')])])]),n("hr"),a._v(" "),n("h3",{attrs:{id:"自定义音频采集和渲染"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义音频采集和渲染"}},[a._v("#")]),a._v(" 自定义音频采集和渲染")]),a._v(" "),n("p",[a._v("在实时音频传输过程中，JC SDK 会启动默认的音频模块进行音频采集。但是对于不支持系统标准 API\n的音频设备，或者想利用自己已经拥有的音频模块进行音频的采集和传输前处理时，可另起采集/播放线程，把自己采集/需要播放的音频数据放入\nJuphoon 对应的接口中进行后续操作。")]),a._v(" "),n("p",[a._v("参考如下步骤，在你的项目中实现自定义音频源功能：")]),a._v(" "),n("p",[a._v("1.通过 JC SDK 提供的接口将外部设备采集/自定义的播放数据输入到 JC SDK 进行后续操作。")]),a._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[a._v("如果想停止外部设备采集/自定义的播放数据的输入，则调用 JC SDK 提供的接口停止数据输入即可。")])]),a._v(" "),n("p",[a._v("自定义音频采集接口如下（在收到登录成功的回调后调用）：")]),a._v(" "),n("p",[a._v("若需要使用自己的音视频设备并且 Zmf_AudioInitialize 初始化成功，在下面的回调函数中操作音频设备；")]),a._v(" "),n("p",[a._v("采集数据输入接口")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("/**\n * The audio input data entry to ZMF\n *\n * @param[in] inputId       unique name of the audio input                       //输入设备id\n * @param[in] sampleRateHz  the sample rating of the pcm data                    //采样率 取值范围：8000，16000，32000，44100，48000取决于外部\n * @param[in] iChannels     the channel number of the pcm data                   //通道数量 取值范围：1或2\n * @param[in] data          the pcm data                                         //外部采集数据源\n * @param[in] playDelayMS   playout delay in ms                                  //播放时延 通常取0\n * @param[in] recDelayMS    record delay in ms                                   //采集时延 通常取0\n * @param[in] clockDrift    clock drift between playout and record timestamp //时钟漂移 通常取0\n *\n */\nstatic public void onInput (String inputId, int sampleRateHz, int iChannels, ByteBuffer data,\n                                                     int playDelayMS, int recDelayMS, int clockDrift)\n")])])]),n("p",[a._v("Note")]),a._v(" "),n("p",[a._v("此接口为将自己采集的音频数据输入到 JC SDK。")]),a._v(" "),n("p",[a._v("示例代码")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v('//初始化音频设备\nandroid.content.Context activity;\nZmfAudio.initialize(activity);\npublic void call() {\n    // 输入长度为length，采样频率16000，通道数为1的pcm数据片段\n    onInput("Test",16000,1,pcmdata,length,0,0,0,0);\n    //发起呼叫\n    call.call("peer number", true, "自定义透传字符串");\n}\n')])])]),n("p",[a._v("采集停止接口")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("/**\n * tell ZMF the audio input has stopped\n *\n * @param[in] inputId       unique name of the device              //输出设备id\n */\nstatic public void onInputDidStop(String inputId)\n")])])]),n("p",[a._v("示例代码")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v('public void endCall() {\n    //停止采集\n    onInputDidStop("Test");\n    //挂断通话\n    call.term(item, JCCall.REASON_NONE, "自己挂断");\n}\n')])])]),n("p",[a._v("如果想在音频输出端使用自定义的播放数据，则调用下面的接口：")]),a._v(" "),n("p",[a._v("播放数据输入接口")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("**\n * The outlet which audio output can get data from.\n *\n * @param[in] outputId      unique name of the audio output       //输出设备id\n * @param[in] sampleRateHz  the sample rating of the pcm data     //采样率 取值范围：8000，16000，32000，44100，48000取决于外部\n * @param[in] iChannels     the channel number of the pcm data    //通道数量 取值范围：1或2\n * @param[in] data          the pcm data to be filled             //外部采集数据源\n */\nstatic public void onOutput (String outputId, int sampleRateHz, int iChannels, ByteBuffer data);\n")])])]),n("p",[a._v("Note")]),a._v(" "),n("p",[a._v("此接口为将自定义音频输出数据输入到 JC SDK。")]),a._v(" "),n("p",[a._v("示例代码")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v('//初始化音频设备\nandroid.content.Context activity;\nZmfAudio.initialize(activity);\npublic void call() {\n    // 输入长度为length，采样频率16000，通道数为1的pcm数据片段\n    onOutput("Test"，16000，1，buf，length);\n    //发起呼叫\n    call.call("peer number", true, "自定义透传字符串");\n}\n')])])]),n("p",[a._v("播放数据停止接口")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("/**\n * tell ZMF the audio output has stopped\n *\n * @param[in] inputId       unique name of the device         //输入设备id\n */\nstatic public void onOutputDidStop(String outputId)\n")])])]),n("p",[a._v("Note")]),a._v(" "),n("p",[a._v("在自定义音频采集场景中，开发者需要自行管理音频数据的采集。在自定义音频渲染场景中，开发者需要自行管理音频数据的播放。")]),a._v(" "),n("p",[a._v("示例代码")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v('public void endCall() {\n    //停止播放数据，业务中或者业务结束时均可以调用\n    onOutputDidStop("Test");\n    //挂断通话\n    call.term(item, JCCall.REASON_NONE, "自己挂断");\n}\n')])])]),n("hr"),a._v(" "),n("h2",{attrs:{id:"音频设备管理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#音频设备管理"}},[a._v("#")]),a._v(" 音频设备管理")]),a._v(" "),n("p",[a._v("音频设备管理主要用到 JCMediaDevice 类中的方法，具体如下：")]),a._v(" "),n("h3",{attrs:{id:"获取音频路由类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#获取音频路由类型"}},[a._v("#")]),a._v(" 获取音频路由类型")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("/**\n * 音频路由类型\n *\n * @return 音频路由类型\n */\npublic abstract int getAudioRouteType();\n")])])]),n("p",[a._v("音频输出类型（AudioRouteType）有以下几种")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("/** 听筒 */\npublic static final int AUDIO_ROUTE_RECEIVER = 0;\n/** 扬声器 */\npublic static final int AUDIO_ROUTE_SPEAKER = 1;\n/** 有线耳机 */\npublic static final int AUDIO_ROUTE_HEADSET = 2;\n/** 蓝牙耳机 */\npublic static final int AUDIO_ROUTE_BLUETOOTH = 3;\n")])])]),n("h3",{attrs:{id:"开启-关闭扬声器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#开启-关闭扬声器"}},[a._v("#")]),a._v(" 开启/关闭扬声器")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("/**\n * 开启/关闭扬声器\n *\n * @param enable 是否开启\n */\npublic abstract void enableSpeaker(boolean enable);\n")])])]),n("h3",{attrs:{id:"开启-关闭音频设备"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#开启-关闭音频设备"}},[a._v("#")]),a._v(" 开启/关闭音频设备")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("/**\n * 启动音频，一般正式开启通话前需要调用此接口\n *\n * @return 成功返回 true，失败返回 false\n */\npublic abstract boolean startAudio();\n\n/**\n * 停止音频，一般在通话结束时调用\n *\n * @return 成功返回 true，失败返回 false\n */\npublic abstract boolean stopAudio();\n")])])]),n("p",[n("strong",[a._v("示例代码")])]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[a._v("// 开启扬声器\nmediaDevice.enableSpeaker(true);\n// 开启音频设备\nmediaDevice.startAudio();\n// 关闭音频设备\nmediaDevice.stopAudio();\n")])])])])}),[],!1,null,null,null);t.default=i.exports}}]);