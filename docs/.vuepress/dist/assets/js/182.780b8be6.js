(window.webpackJsonp=window.webpackJsonp||[]).push([[182],{740:function(e,a,t){"use strict";t.r(a);var l=t(43),n=Object(l.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"通话管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通话管理"}},[e._v("#")]),e._v(" 通话管理")]),e._v(" "),t("h2",{attrs:{id:"通话人数设置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通话人数设置"}},[e._v("#")]),e._v(" 通话人数设置")]),e._v(" "),t("p",[e._v("发起通话前可以通过 maxCallNum 属性设置通话的最大人数，默认为 1。如果是视频通话，最大人数只能是 1，如果是语音通话，最大人数为\n2。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("call.maxCallNum = 1;\n")])])]),t("p",[e._v("当通话超过最大人数时：")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("呼出会失败，原因为 JCCallReasonCallOverLimit（超过通话数限制）。")])]),e._v(" "),t("li",[t("p",[e._v("收到来电会自动拒绝，原因为 JCCallReasonBusy（忙）。")])])]),e._v(" "),t("h2",{attrs:{id:"通话过程控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通话过程控制"}},[e._v("#")]),e._v(" 通话过程控制")]),e._v(" "),t("h3",{attrs:{id:"通话静音"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通话静音"}},[e._v("#")]),e._v(" 通话静音")]),e._v(" "),t("p",[e._v("您可以通过下面的方法开启或关闭静音，开启关闭静音需要根据 JCCallItem 中的静音状态来决定，静音状态（mute）可通过\n"),t("a",{attrs:{href:"http://developer.juphoon.com/portal/reference/android/com/juphoon/cloud/JCCallItem.html#getMute--",target:"_blank",rel:"noopener noreferrer"}},[e._v("getMute()"),t("OutboundLink")],1),e._v("\n方法获得。静音开启后，对方将听不到您的声音")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("/**\n * 静音，通过 JCCallItem 对象中的静音状态来决定开启关闭静音\n *\n * @param   item JCCallItem 对象\n * @return  返回 true 表示正常执行调用流程，false 表示调用异常\n */\npublic abstract boolean mute(JCCallItem item);\n")])])]),t("h3",{attrs:{id:"通话录音"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通话录音"}},[e._v("#")]),e._v(" 通话录音")]),e._v(" "),t("p",[e._v("可以在通话中进行录音，开启或关闭录音需要根据当前的录音状态（audioRecord）来决定。如果正在录制或者通话被挂起或者挂起的情况下，不能进行音频录制。录音状态（audioRecord）可通过\n"),t("a",{attrs:{href:"https://developer.juphoon.com/portal/reference/V2.1/android/com/juphoon/cloud/JCCallItem.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("JCCallItem"),t("OutboundLink")],1),e._v("\n对象中的 getAudioRecord() 方法获得。")]),e._v(" "),t("p",[e._v("开启或关闭录音接口如下")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("/**\n * 语音通话录音，通过 JCCallItem 对象中的audioRecord状态来决定开启关闭录音\n *\n * @param item      JCCallItem 对象\n * @param enable    开启关闭录音\n * @param filePath  录音文件路径\n * @return          返回 true 表示正常执行调用流程，false 表示调用异常\n */\npublic abstract boolean audioRecord(JCCallItem item, boolean enable, String filePath);\n")])])]),t("p",[e._v("示例代码:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('JCCallItem item = call.getCallItems().get(0);\nif (item.getAudioRecord()) {\n    // 录音结束\n    call.audioRecord(item, false, "your filePath");\n} else {\n    // 创建录音保存文件路径\n    String filePath; // 录音文件的绝对路径，SDK会自动创建录音文件\n    if (!TextUtils.isEmpty(filePath)) {\n        // 开始录音\n        call.audioRecord(item, true, filePath);\n    }\n}\n')])])]),t("p",[e._v("开启或关闭录音时，录音状态会发生改变，并通过 onCallItemUpdate 回调上报")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("/**\n * 通话状态更新回调（当上层收到此回调时，可以根据 JCCallItem 对象获得该通话的所有信息及状态，从而更新该通话相关UI）\n *\n * @param item JCCallItem 对象\n * @param changeParam 更新标识类\n */\nvoid onCallItemUpdate(JCCallItem item, JCCallItem.ChangeParam changeParam);\n")])])]),t("hr"),e._v(" "),t("h3",{attrs:{id:"开启-关闭呼叫保持"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开启-关闭呼叫保持"}},[e._v("#")]),e._v(" 开启/关闭呼叫保持")]),e._v(" "),t("p",[e._v("您可以调用下面的方法对通话对象进行呼叫保持或解除呼叫保持，开启或关闭呼叫保持需要根据 JCCallItem\n对象中的呼叫保持状态来决定，呼叫保持状态（hold）可通过\n"),t("a",{attrs:{href:"https://developer.juphoon.com/portal/reference/V2.1/android/com/juphoon/cloud/JCCallItem.html#getHold--",target:"_blank",rel:"noopener noreferrer"}},[e._v("getHold()"),t("OutboundLink")],1),e._v("\n方法获得")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("/**\n * 呼叫保持，通过 JCCallItem 对象中的呼叫保持状态来决定开启关闭呼叫保持\n * 只针对音频，如果是视频通话则要上层处理视频逻辑\n *\n * @param item  JCCallItem 对象\n * @return      返回 true 表示正常执行调用流程，false 表示调用异常\n */\npublic abstract boolean hold(JCCallItem item);\n")])])]),t("h3",{attrs:{id:"切换活跃通话"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#切换活跃通话"}},[e._v("#")]),e._v(" 切换活跃通话")]),e._v(" "),t("p",[e._v("调用下面的方法对通话中被保持的对象和活跃的通话对象进行切换")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("/**\n * 切换活跃通话\n *\n * @param item  需要变为活跃状态的 JCCallItem 对象\n * @return      返回 true 表示正常执行调用流程，false 表示调用异常\n */\npublic abstract boolean becomeActive(JCCallItem item);\n")])])]),t("h3",{attrs:{id:"通话中发送消息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通话中发送消息"}},[e._v("#")]),e._v(" 通话中发送消息")]),e._v(" "),t("p",[e._v("调用下面的接口在通话中实现发消息的功能")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("/**\n * 通过通话建立的通道发送数据\n *\n * @param item      需要发送数据的 JCCallItem 对象\n * @param type      文本消息类型，用户可以自定义，例如text，xml等\n * @param content   文本内容\n * @return          返回 true 表示正常执行调用流程，false 表示调用异常\n */\npublic abstract boolean sendMessage(JCCallItem item, String type, String content);\n")])])]),t("p",[e._v("当通话中收到消息时，会收到 onMessageReceive 回调")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("/**\n * 通话中收到消息的回调\n *\n * @param type    消息类型\n * @param content 消息内容\n * @param item    JCCallItem 对象\n */\nvoid onMessageReceive(String type, String content, JCCallItem item);\n")])])]),t("p",[e._v("示例代码:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('JCCallItem item = call.getActiveCallItem();\ncall.sendMessage("text", "消息内容", item);\n')])])]),t("hr"),e._v(" "),t("h3",{attrs:{id:"相关回调"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#相关回调"}},[e._v("#")]),e._v(" 相关回调")]),e._v(" "),t("p",[e._v("通话过程中，如果通话状态发生了改变，如开启关闭静音、开启关闭通话保持、活跃状态切换、网络变化等，将会收到通话状态更新的回调。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("/**\n * 通话状态更新回调（当上层收到此回调时，可以根据 JCCallItem 对象获得该通话的所有信息及状态，从而更新该通话相关UI）\n *\n * @param item           JCCallItem 对象，当 item 为 null 时表示全部更新\n * @param changeParam    更新标识类\n */\nvoid onCallItemUpdate(JCCallItem item, JCCallItem.ChangeParam changeParam);\n")])])]),t("p",[e._v("Note")]),e._v(" "),t("p",[e._v("静音状态、通话保持状态、活跃状态可通过\n"),t("a",{attrs:{href:"https://developer.juphoon.com/portal/reference/V2.1/android/com/juphoon/cloud/JCCallItem.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("JCCallItem"),t("OutboundLink")],1),e._v("\n对象获得。")]),e._v(" "),t("p",[e._v("示例代码:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public void onCallItemUpdate(JCCallItem item, JCCallItem.ChangeParam changeParam) {\n    if (item.mute) { // 开启静音\n        ...\n    } else if (item.hold) { // 挂起通话\n        ...\n    } else if (item.held) { // 被挂起\n        ...\n    } else if (item.active) { // 激活状态\n        ...\n    } else if (item.uploadVideoStreamSelf) { // 本端在上传视频流\n        ...\n    } else if (item.uploadVideoStreamOther) { // 远端在上传视频流\n        ...\n    }\n}\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);